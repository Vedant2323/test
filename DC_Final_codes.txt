Problem statement 1:
Simulation study of random processes. Find various statistical
parameters of the random process.
• Write a program to plot PDF of a Gaussian (Normal) Random Variable for
Standard Gaussian: mean = 0 and standard deviation = 1

code :

clc;
clear all;
close all;
pkg load statistics;
m=0;
sd=1;
x=-5:0.1:5;
y=normpdf(x,m,sd);
subplot(2,2,1);
plot(x,y);
xlabel('x');
ylabel('pdf');
title('normpdf with mean 0 and std deviation 1');


Problem Statment 2:
Simulation study of random processes. Find various statistical
parameters of the random process.
• Write a program to plot PDF of a Gaussian (Normal) Random Variable for
Standard Gaussian: mean = 1 and standard deviation = 0.5

code :

clc;
clear all;
close all;
pkg load statistics;
m=1;
sd=0.5;
x=-5:0.1:5;
y=normpdf(x,m,sd);
subplot(2,2,1);
plot(x,y);
xlabel('x');
ylabel('pdf');
title('normpdf with mean 0 and std deviation 1');


Problem Statment 3:
Simulation study of various Entropies and mutual information in a
communication system.
• Consider a binary symmetric communication channel whose input source is the
alphabet X={0,1} with probabilities {0.5, 0.5}; whose output alphabet is
Y={0,1} and whose channel matrix is

where, є is the probability of error.
Write a program for entropy of source H(X), H(Y), I(X;Y) for є=0 and є=0.5
Also comment on the type of channel.

code :

clc;
clear;
close all;

n=input("Enter the no of source elements: ");
q=input("Enter the channel matrix P(Y/X)");   %matrix P(Y/X)
disp(q);
disp("");
N=1:n;
p=input("Enter the source probability: ");
%probabilities for X

px=diag(p,n,n);
%matrix P(X)
disp("P(X): ");
disp(px);
disp("");


pxy=px*q; %P(X,Y)=P(X)*P(Y|X)
disp("P(X,Y): ");
disp(pxy);
disp("");

py=p*q;        %P(Y)
disp('P(Y): ');
disp(py);
disp("");

                     %Entropy of
%source h(x)
Hx=0;
for i=1:n
  Hx=Hx+(-(p(i)*log2(p(i))));
end
disp('h(x): ');
disp(Hx);
disp("");

                     %Entropy of
%destination H(y)
Hy=0;
for i=1:n
  Hy=Hy+(-(py(i)*log2(py(i))));
end
disp('h(y): ');
disp(Hy);
disp("");

                    % Mutual
%Entropy H(x,y)
hxy=0
for i=1:n
  for j=1:n
    hxy=hxy+(-pxy(i,j)*log2(pxy(i,j)));
  end
end
disp('H(x,y): ');
disp(hxy);
disp("");

                    % Conditional
%Entropy H(y/x)
h1=hxy-Hx;
disp('H(x/y): ');
disp(h1);
disp("")

                    % Conditional
%Entropy H(x/y)
h2=hxy-Hy;
disp('H(y/x): ');
disp(h2);
disp("");

                    % Mutual
%Information I(x,y)
Ixy=Hx-h2;
disp('I(x,y): ');
disp(Ixy);
disp("");

if h2==0
  disp("This Channel is a lossless channel");
end
if Ixy==0
  disp("This Channel is a useless channel");
end
if Hx==Hy
  if h1==0
    disp("This Channel is noiseless channel");
  endif
end


Problem statement 4:
A file contains the following characters with the frequencies as shown. If Huffman Coding
is used, Determine Huffman Code for each character using Octave script. Calculate Average
code length, Entropy and Efficiency of Huffman encoded message.

code : 

clc;
clear all;
close all;
pkg load communications
symbols = 1:4;
p=[0.5 0.25 0.15 0.10];
disp("\nSymbols are");
disp(symbols);
disp("length of symbols=");
disp(length(symbols));
disp("\nRespective probabilities are");
disp(p);
dict = huffmandict(symbols,p);
disp("\nHuffman dictionary is");
disp(dict);
inputSig = randsrc(10,1,[symbols;p]);
%inputSig =[1 1 1 1 2 2 2 3 3 4];
%disp("\nRandom generated input symbols are");
disp("\ninput symbols are");
disp(inputSig);
code = huffmanenco(inputSig,dict);
disp("\nEncoded message is");
disp(code);
decode = huffmandeco(code,dict);
disp("\nDecoded symbols are");
disp(decode);
avg_code_len=0;
for i=1:length(symbols)
%disp(p(i));
%disp(length(dict(1:i)));
%disp(total_code_len=p(i)*length(dict(1:i)));
total_code_len=p(i)*length(dict(1:i));
avg_code_len=avg_code_len+total_code_len;
end
disp("avg_code_len=");
disp(avg_code_len);
H = -sum(p .* log2(p));
disp("Entropy=");
disp(H);
efficiency=H/avg_code_len;
disp("Efficiency=");
disp(efficiency);
redundancy = 1 - efficiency;
disp("Redundancy=")
disp(redundancy);


Problem Statement 5 :
Generate a linear block code: systematic hamming code of size (7, 4) with
given parity matrix = [1 0 1;1 1 1;1 1 0; 0 1 1]. Calculate Hamming weight of
every codeword. Calculate minimum hamming distance between any two valid
codeword generated. Check the following code words validity using syndrome,
identify number of errors and its location in the invalid codeword. Further
correct the invalid codeword using syndrome analysis.
a) [0 0 0 0 0 0 1]
b) [0 1 1 1 0 1 1] 

Code :


clear all;
close all;
clc;
n = input('Enter no of code bits: ');
k = input('Enter no of message bits: ');
p = input('Enter parity matrix: ');
disp('Parity matrix: ');
disp(p);
I = eye(k);
G =[I,p];
disp('Generator matrix');
disp(' G = [Ik : P]');
disp(G);
m = dec2bin(0:1:2^k-1);
disp('message words')
disp(m);
C = m * G;
for i = 1:2^k
for j =1:n
C(i,j) = mod(C(i,j),2);
end
end
disp('Codewords are:');
disp(' C = mG');
disp(C);
weight = sum(C');
disp('Hamming weight of codes');
disp(weight');
weight(1,1) = weight(1,2);
d = min(weight);
disp('Minimum Hamming weight(dmin):')
disp(d);
Td = d - 1;
disp('td =');
disp('dmin - 1');
disp(Td);Tc = (d-1)/2;
disp('tc=');
disp('(dmin-1)/2');
disp(Tc);
H = [p',eye(n-k)];
disp(' H = [transpose(P):I(n-k)');
disp(H);
disp( 'H transpose')
disp(H');
disp('');
disp('');
E = eye(n);
r = input('Enter recieved codeword(r):');
s = r*H';
for i=1:n-k
s(1,i) = mod(s(1,i),2);
end
h = H';
disp('Syndrome is (S):');
disp('S = r * transpose(H)');
disp(s);
error=0;
if(s==[0 0 0])
disp ('valid code word');
else
for i=1:n
if(s ==h(i,:))
error = i;
disp('error is in')
disp(i);
break;
end
end
end
if error>0
disp('Error pattern(e)= ');
disp(E(error,:));
c = mod((r + E(error,:)),2);
disp('error corrected code word');
disp('C = r + e');
disp(c);
end


Problem Statement 6:
Write a program to plot signal constellation diagram of received 16-QAM
signal in the presence of AWGN.

Code :

clc;
clear all;
close all;
pkg load communications
N = 16000;  % Number of bits to be transmitted using 16-Square QAM
            % Too large value may slow down the program
x = randi([0,1],1,N); % Random input bits generation
M = 16;     % Number of Symbols in 16-Square QAM
d = sqrt(2/5); % Average symbol energy is normalized to unity

% Symbol Generation
yy = [];
for i = 1:4:length(x)
  if x(i) == 0 && x(i+1) == 0 && x(i+2) == 0 && x(i+3) == 0
    y = -3*d/2 + j*(-3*d/2);
  elseif x(i) == 0 && x(i+1) == 0 && x(i+2) == 0 && x(i+3) == 1
    y = -3*d/2 + j*(-d/2);
  elseif x(i) == 0 && x(i+1) == 0 && x(i+2) == 1 && x(i+3) == 1
    y = -3*d/2 + j*(d/2);
  elseif x(i) == 0 && x(i+1) == 0 && x(i+2) == 1 && x(i+3) == 0
    y = -3*d/2 + j*(3*d/2);

  elseif x(i) == 0 && x(i+1) == 1 && x(i+2) == 0 && x(i+3) == 0
    y = -d/2 + j*(-3*d/2);
  elseif x(i) == 0 && x(i+1) == 1 && x(i+2) == 0 && x(i+3) == 1
    y = -d/2 + j*(-d/2);
  elseif x(i) == 0 && x(i+1) == 1 && x(i+2) == 1 && x(i+3) == 1
    y = -d/2 + j*(d/2);
  elseif x(i) == 0 && x(i+1) == 1 && x(i+2) == 1 && x(i+3) == 0
    y = -d/2 + j*(3*d/2);

  elseif x(i) == 1 && x(i+1) == 1 && x(i+2) == 0 && x(i+3) == 0
    y = d/2 + j*(-3*d/2);
  elseif x(i) == 1 && x(i+1) == 1 && x(i+2) == 0 && x(i+3) == 1
    y = d/2 + j*(-d/2);
  elseif x(i) == 1 && x(i+1) == 1 && x(i+2) == 1 && x(i+3) == 1
    y = d/2 + j*(d/2);
  elseif x(i) == 1 && x(i+1) == 1 && x(i+2) == 1 && x(i+3) == 0
    y = d/2 + j*(3*d/2);

  elseif x(i) == 1 && x(i+1) == 0 && x(i+2) == 0 && x(i+3) == 0
    y = 3*d/2 + j*(-3*d/2);
  elseif x(i) == 1 && x(i+1) == 0 && x(i+2) == 0 && x(i+3) == 1
    y = 3*d/2 + j*(-d/2);
  elseif x(i) == 1 && x(i+1) == 0 && x(i+2) == 1 && x(i+3) == 1
    y = 3*d/2 + j*(d/2);
  elseif x(i) == 1 && x(i+1) == 0 && x(i+2) == 1 && x(i+3) == 0
    y = 3*d/2 + j*(3*d/2);
  end
  % Transmitted Symbols
  yy = [yy y];
end

scatterplot(yy);  % Constellation Diagram without Noise
EbN0db = 20;      % Change this value & run the program to see the noisy constellation
EbN0 = 10^(EbN0db/10);

% AWGN Channel
n = (1/sqrt(2)) * [randn(1, length(yy)) + 1j * randn(1, length(yy))];
sigma = sqrt(1 / ((log2(M)) * EbN0));

% Received Symbols
r = yy + sigma * n;
scatterplot(r);   % Constellation Diagram with Noise


Problem Statement 7:
Write a program to plot practical and theoretical BER vs SNR graph of received 16-
QAM signal.

Code :
clc;
clear all;
close all;
pkg load communications

N = 4000;  % Number of bits to be transmitted using *-PSK
           % Too large value may slow down the program
x = randi([0,1],1,N); % Random input bits generation
M = 16;     % Number of Symbols in 16-Square QAM
d = sqrt(2/5); % Average symbol energy is normalized to unity

% Symbol Generation
yy = [];
for i = 1:4:length(x)
  if x(i) == 0 && x(i+1) == 0 && x(i+2) == 0 && x(i+3) == 0
    y = -3*d/2 + j*(-3*d/2);
  elseif x(i) == 0 && x(i+1) == 0 && x(i+2) == 0 && x(i+3) == 1
    y = -3*d/2 + j*(-d/2);
  elseif x(i) == 0 && x(i+1) == 0 && x(i+2) == 1 && x(i+3) == 1
    y = -3*d/2 + j*(d/2);
  elseif x(i) == 0 && x(i+1) == 0 && x(i+2) == 1 && x(i+3) == 0
    y = -3*d/2 + j*(3*d/2);

  elseif x(i) == 0 && x(i+1) == 1 && x(i+2) == 0 && x(i+3) == 0
    y = -d/2 + j*(-3*d/2);
  elseif x(i) == 0 && x(i+1) == 1 && x(i+2) == 0 && x(i+3) == 1
    y = -d/2 + j*(-d/2);
  elseif x(i) == 0 && x(i+1) == 1 && x(i+2) == 1 && x(i+3) == 1
    y = -d/2 + j*(d/2);
  elseif x(i) == 0 && x(i+1) == 1 && x(i+2) == 1 && x(i+3) == 0
    y = -d/2 + j*(3*d/2);

  elseif x(i) == 1 && x(i+1) == 1 && x(i+2) == 0 && x(i+3) == 0
    y = d/2 + j*(-3*d/2);
  elseif x(i) == 1 && x(i+1) == 1 && x(i+2) == 0 && x(i+3) == 1
    y = d/2 + j*(-d/2);
  elseif x(i) == 1 && x(i+1) == 1 && x(i+2) == 1 && x(i+3) == 1
    y = d/2 + j*(d/2);
  elseif x(i) == 1 && x(i+1) == 1 && x(i+2) == 1 && x(i+3) == 0
    y = d/2 + j*(3*d/2);

  elseif x(i) == 1 && x(i+1) == 0 && x(i+2) == 0 && x(i+3) == 0
    y = 3*d/2 + j*(-3*d/2);
  elseif x(i) == 1 && x(i+1) == 0 && x(i+2) == 0 && x(i+3) == 1
    y = 3*d/2 + j*(-d/2);
  elseif x(i) == 1 && x(i+1) == 0 && x(i+2) == 1 && x(i+3) == 1
    y = 3*d/2 + j*(d/2);
  elseif x(i) == 1 && x(i+1) == 0 && x(i+2) == 1 && x(i+3) == 0
    y = 3*d/2 + j*(3*d/2);
  endif
  % Transmitted Symbols
  yy = [yy y];
endfor

% Detection based on Euclidean distance
ber_simulated = [];
ber_theoretical = [];
ref_symbols = [-3*d/2 + j*(-3*d/2), -3*d/2 + j*(-d/2), -3*d/2 + j*d/2, -3*d/2 + j*(3*d/2),
               -d/2 + j*(-3*d/2), -d/2 + j*(-d/2), -d/2 + j*d/2, -d/2 + j*(3*d/2),
               d/2 + j*(-3*d/2), d/2 + j*(-d/2), d/2 + j*d/2, d/2 + j*(3*d/2),
               3*d/2 + j*(-3*d/2), 3*d/2 + j*(-d/2), 3*d/2 + j*d/2, 3*d/2 + j*(3*d/2)];

for EbN0db = 0:15
  EbN0 = 10^(EbN0db/10);
  n = (1/sqrt(2)) * [randn(1, length(yy)) + 1j * randn(1, length(yy))];
  sigma = sqrt(1 / (log2(M) * EbN0)); % Symbol energy is normalized to Unity
  r = yy + sigma * n;

  % Calculation of Euclidean Distances of received symbols from reference symbols
  min_dist_index = [];
  for i = 1:length(r)
    Dist = [];
    for k = 1:length(ref_symbols)
      dist = sqrt((real(r(i)) - real(ref_symbols(k)))^2 + (imag(r(i)) - imag(ref_symbols(k)))^2);
      Dist = [Dist dist];
    endfor
    [~, idx] = min(Dist);
    min_dist_index = [min_dist_index idx];
  endfor

  % Estimation of Bits
  x_estimated = [];
  for i = 1:length(r)
    if ref_symbols(min_dist_index(i)) == -3*d/2 + j*(-3*d/2)
      x_estimated = [x_estimated 0 0 0 0];
    elseif ref_symbols(min_dist_index(i)) == -3*d/2 + j*(-d/2)
      x_estimated = [x_estimated 0 0 0 1];
    elseif ref_symbols(min_dist_index(i)) == -3*d/2 + j*d/2
      x_estimated = [x_estimated 0 0 1 1];
    elseif ref_symbols(min_dist_index(i)) == -3*d/2 + j*(3*d/2)
      x_estimated = [x_estimated 0 0 1 0];

    elseif ref_symbols(min_dist_index(i)) == -d/2 + j*(-3*d/2)
      x_estimated = [x_estimated 0 1 0 0];
    elseif ref_symbols(min_dist_index(i)) == -d/2 + j*(-d/2)
      x_estimated = [x_estimated 0 1 0 1];
    elseif ref_symbols(min_dist_index(i)) == -d/2 + j*d/2
      x_estimated = [x_estimated 0 1 1 1];
    elseif ref_symbols(min_dist_index(i)) == -d/2 + j*(3*d/2)
      x_estimated = [x_estimated 0 1 1 0];

    elseif ref_symbols(min_dist_index(i)) == d/2 + j*(-3*d/2)
      x_estimated = [x_estimated 1 1 0 0];
    elseif ref_symbols(min_dist_index(i)) == d/2 + j*(-d/2)
      x_estimated = [x_estimated 1 1 0 1];
    elseif ref_symbols(min_dist_index(i)) == d/2 + j*d/2
      x_estimated = [x_estimated 1 1 1 1];
    elseif ref_symbols(min_dist_index(i)) == d/2 + j*(3*d/2)
      x_estimated = [x_estimated 1 1 1 0];

    elseif ref_symbols(min_dist_index(i)) == 3*d/2 + j*(-3*d/2)
      x_estimated = [x_estimated 1 0 0 0];
    elseif ref_symbols(min_dist_index(i)) == 3*d/2 + j*(-d/2)
      x_estimated = [x_estimated 1 0 0 1];
    elseif ref_symbols(min_dist_index(i)) == 3*d/2 + j*d/2
      x_estimated = [x_estimated 1 0 1 1];
    elseif ref_symbols(min_dist_index(i)) == 3*d/2 + j*(3*d/2)
      x_estimated = [x_estimated 1 0 1 0];
    endif
  endfor

  % Calculation of BER
  x_error = sum(x ~= x_estimated);
  ber_simulated = [ber_simulated x_error / N];
  ber_theoretical = [ber_theoretical 3/8 * erfc(sqrt(0.1 * EbN0))];
endfor

EbN0db = 0:15;
semilogy(EbN0db, ber_simulated, 'r*', 'linewidth', 1.5);
hold on
semilogy(EbN0db, ber_theoretical, 'k-', 'linewidth', 1.5);
title('BER Performance of 16-Square QAM');
xlabel('E_b/N_0 (dB)');
ylabel('Bit Error Rate');
grid on
legend('Simulated', 'Theoretical');
hold off


Problem Statement 7:
Simulation study of Performance of M-ary PSK.
• Write a program to plot signal constellation diagram of received 8-PSK signal in
the presence of AWGN

Code :

clc;
clear all;
close all;
pkg load communications;

N=3000;
x=randi([0,1],1,N);
M=8;

yy=[];
for i=1:3:length(x) if x(i)==0 && x(i+1)==0 && x(i+2)==0 y=cosd(0)+1j*sind(0);
  elseif x(i)==0 && x(i+1)==0 && x(i+2)==1 y=cosd(45)+1j*sind(45);
  elseif x(i)==0 && x(i+1)==1 && x(i+2)==1 y=cosd(90)+1j*sind(90);
  elseif x(i)==0 && x(i+1)==1 && x(i+2)==0 y=cosd(135)+1j*sind(135);
  elseif x(i)==1 && x(i+1)==1 && x(i+2)==0 y=cosd(180)+1j*sind(180);
  elseif x(i)==1 && x(i+1)==1 && x(i+2)==1 y=cosd(225)+1j*sind(225);
  elseif x(i)==1 && x(i+1)==0 && x(i+2)==1 y=cosd(270)+1j*sind(270);
  elseif x(i)==1 && x(i+1)==0 && x(i+2)==0 y=cosd(315)+1j*sind(315);
endif
yy=[yy y];
endfor

scatterplot(yy);
title('Constellation diagram without Noise','FontSize',20);
xlabel('in-phase','FontSize',25);
ylabel('Quadrature','FontSize',25);
EbN0db=20;
EbN0=10^(EbN0db/10);

n=(1/sqrt(2))*[randn(1,length(yy))+1j*randn(1,length(yy))];
sigma=sqrt(1/((log2(M))*EbN0));

r=yy+sigma*n;
scatterplot(r);
title('Constellation diagram with noise','FontSize',20);
xlabel('In-phase','FontSize',25);
ylabel('Quadrature','FontSize',25);

Problem Statement 8:
Simulation study of Performance of M-ary PSK.
• Write a program to plot practical and theoretical BER vs SNR graph of received
8-PSK signal.

Code :

clc;
clear all;
close all;
pkg load communications
N=1000;
mlevel=4;
k=log2(mlevel);

% signal generation in bit stream
x=randi([0,1],N,1);

% convert bit stream into symbol stream
xsym=bi2de(reshape(x,k,length(x)/k).','left-msb');

% modulation
xmod=qammod(xsym,mlevel);

%loop through diffrent SNR value
snr_values=0:50;
ber_values=zeros(size(snr_values));

for idx=1:length(snr_values)
  SNR=snr_values(idx);
  % adding AWGN
  Tx_awgn=awgn(xmod,SNR,'measured');
  % recived signal
  Rx_x=Tx_awgn;
  % demodulation
  Rx_x_demod=qamdemod(Rx_x,mlevel);
  
  z=de2bi(Rx_x_demod,'left-msb');
  Rx_x_BitStream=reshape(z.',prod(size(z)),1);

  % calculation of BER
  [number_of_errors,bit_error_rate]=biterr(x,Rx_x_BitStream);
  ber_values(idx)=bit_error_rate;

end

% Plot BER vs. SNR
 figure;
 semilogy(snr_values,ber_values,'bo-');
 grid on;
 xlabel('SNR (dB)');
 ylabel('Bit Error Rate (BER)');
 title('BER vs SNR for QAM');




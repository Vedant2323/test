Experiment 3 - Huffman Coding

clc;
clear all;
close all;
pkg load communications
symbols = 1:5;
p=[0.40 0.20 0.20 0.10 0.10];
disp("\nSymbols are");
disp(symbols);
disp("length of symbols=");
disp(length(symbols));
disp("\nRespective probabilities are");
disp(p);
dict = huffmandict(symbols,p);
disp("\nHuffman dictionary is");
disp(dict);
inputSig = randsrc(10,1,[symbols;p]);
%inputSig =[1 1 1 1 2 2 2 3 3 4];
%disp("\nRandom generated input symbols are");
disp("\ninput symbols are");
disp(inputSig);
code = huffmanenco(inputSig,dict);
disp("\nEncoded message is");
disp(code);
decode = huffmandeco(code,dict);
disp("\nDecoded symbols are");
disp(decode);

avg_code_len=0;
for i=1:length(symbols)
  %disp(p(i));
  %disp(length(dict(1:i)));
  %disp(total_code_len=p(i)*length(dict(1:i)));
  total_code_len=p(i)*length(dict(1:i));
  avg_code_len=avg_code_len+total_code_len;
end
disp("avg_code_len=");
disp(avg_code_len);

H = -sum(p .* log2(p));
disp("Entropy=");
disp(H);

efficiency=H/avg_code_len;
disp("Efficiency=");
disp(efficiency);

redundancy = 1 - efficiency;
disp("Redundancy=")
disp(redundancy);


Experiment 3 - Shannonfano  Coding

clc;
clear all;
close all;
pkg load communications
symbols = 1:5;
p=[0.40 0.20 0.20 0.10 0.10];
disp("\nSymbols are");
disp(symbols);
disp("length of symbols=");
disp(length(symbols));
disp("\nRespective probabilities are");
disp(p);
dict = shannonfanodict(symbols,p);
disp("\nShannon fano dictionary is");
disp(dict);
inputSig = randsrc(10,1,[symbols;p]);
%inputSig =[1 1 1 1 2 2 2 3 3 4];
%disp("\nRandom generated input symbols are");
disp("\ninput symbols are");
disp(inputSig);
code = shannonfanoenco(inputSig,dict);
disp("\nEncoded message is");
disp(code);
decode = shannonfanodeco(code,dict);
disp("\nDecoded symbols are");
disp(decode);

avg_code_len=0;
for i=1:length(symbols)
  %disp(p(i));
  %disp(length(dict(1:i)));
  %disp(total_code_len=p(i)*length(dict(1:i)));
  total_code_len=p(i)*length(dict(1:i));
  avg_code_len=avg_code_len+total_code_len;
end
disp("avg_code_len=");
disp(avg_code_len);

H = -sum(p .* log2(p));
disp("Entropy=");
disp(H);

efficiency=H/avg_code_len;
disp("Efficiency=");
disp(efficiency);

redundancy = 1 - efficiency;
disp("Redundancy=")
disp(redundancy);












clc;
clear all;
close all;
pkg load statistics;
%                           EXPERIMENT-1 <<Part-A>>
% Write a program to plot PDF of a Gaussian (Normal) Random Variable for:
%      CASE-1 Standard Gaussian: mean = 0 and standard deviation = 1
%      CASE-2 General Gaussian: mean = 1 and standard deviation = 1
%      CASE-3 General Gaussian: mean = -1 and standard deviation = 1
%      CASE-4 General Gaussian: mean = 0 and standard deviation = 1.5
%      CASE-5 General Gaussian: mean = 0 and standard deviation = 0.5
%      CASE-6 General Gaussian: mean = 1 and standard deviation = 0.5

% Plotting Case-1:
  m = 0;        # Given: mean = 0
  sd = 1;       # Given: standard deviation = 1
  x=-6:0.1:6; # Define suitable range of x values (as per our choice).
  y=normpdf(x,m,sd); # Calculate values of Normal PDF for all xs.
# Note: The 'normpdf' function belongs to the statistics package.
#       To load the package,run 'pkg load statistics' from the Octave prompt
#       in command window before running this program.

  figure(1)   # Open a figure window named as figure-1.
# We wish to plot all the cases (Total 6 Plots) in the same figure window.
# Use 2 rows & 3 columns so that we have total 6 plots as shown below.
#           +-----+-----+-----+
#           |  1  |  2  |  3  |
#           +-----+-----+-----+
#           |  4  |  5  |  6  |
#           +-----+-----+-----+
  subplot(2,3,1)  # The plot (Case-1) will be on location-1 as shown above.
  plot(x,y)       # To plot Case-1 (y vs x).
  axis([-6 6 0 1]) # x-axis ranges from -10 to 10 & y-axis ranges from 0 to 1.
  xlabel('x values----->');
  ylabel('PDF--->');
  title('CASE-1: mean=0, std dev=1') # Title of the plot
  grid on;

% Plotting Case-2:
% Write the code yourself to plot Case-2 on Location-2 with given mean and
% standard deviation.
  m = 1;        # Given: mean = 1
  sd = 1;       # Given: standard deviation = 1
  x=-6:0.1:6; # Define suitable range of x values (as per our choice).
  y=normpdf(x,m,sd); # Calculate values of Normal PDF for all xs.
  subplot(2,3,2)  # The plot (Case-1) will be on location-1 as shown above.
  plot(x,y)       # To plot Case-1 (y vs x).
  axis([-6 6 0 1]) # x-axis ranges from -10 to 10 & y-axis ranges from 0 to 1.
  xlabel('x values----->');
  ylabel('PDF--->');
  title('CASE-2: mean=1, std dev=1') # Title of the plot
  grid on;

% Plotting Case-3:
% Write the code yourself to plot Case-2 on Location-3 with given mean and
% standard deviation.


% Plotting Case-4:
% Write the code yourself to plot Case-2 on Location-4 with given mean and
% standard deviation.


% Plotting Case-5:
% Write the code yourself to plot Case-2 on Location-5 with given mean and
% standard deviation.


% Plotting Case-6:
% Write the code yourself to plot Case-2 on Location-6 with given mean and
% standard deviation.



Experiment-1 PART-B
% Program to plot PSD and Autocorrelation of White Gaussian Random Process
clc;
clear all;
close all;
pkg load statistics;
y=normrnd(0,1,1,200);
Gy=periodogram(y);
Ry=abs(ifft(Gy,256));
Ry=[Ry(130:256)' Ry(1:129)'];
t=-127:1:128;
%figure
subplot(1,2,1)
plot(Gy)
xlabel('frequencysamples');
title('PSD')
subplot(1,2,2)
stem(t,Ry)
xlabel('time shift')
title('autocorrelation') 
